# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Java

permissions:
  checks: write # Required for jacoco-reporter
  pull-requests: write # Required for jacoco-reporter
  packages: write # Required for Docker
  contents: read # Required for jacoco-reporter
  security-events: write # Required for Trivy

on:
  push:
    branches:
      - "main"
      - "feature/actions"
  pull_request:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Restore dependencies
        run: mvn dependency:resolve

      - name: Tests
        run: mvn --batch-mode --update-snapshots verify test package

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: "**/surefire-reports/TEST-*.xml"

      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.8
        with:
          coverage_results_path: "target/site/jacoco/jacoco.xml"
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false

      # - name: Docker build
      #   run: docker build -t ghcr.io/artm-devsecops/devsecops-template-api-java:${{ github.sha }} -f ./Containerfile ./target/

      - name: Buildah build
        uses: redhat-actions/buildah-build@v2
        with:
          image: ghcr.io/artm-devsecops/devsecops-template-api-java
          tags: v1 ${{ github.sha }}
          context: ./target
          containerfiles: |
            ./Containerfile

      - name: Buildah push
        run: buildah push ghcr.io/artm-devsecops/devsecops-template-api-java:${{ github.sha }} oci:./target/oci-devsecops-template-api-java

      - name: debug
        run: |
          ls -la ./target/oci-devsecops-template-api-java

      - name: install trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.36.1/trivy_0.36.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.36.1_Linux-64bit.deb

      - name: Run Trivy vulnerability scanner in tarball mode
        run: |
          trivy image \
            --offline-scan \
            --format sarif \
            --vuln-type os,library \
            --severity CRITICAL,HIGH \
            --output trivy-results.sarif \
            --timeout 5m0s \
            --input ./target/oci-devsecops-template-api-java

    # - name: Run Trivy vulnerability scanner in tarball mode
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     input: ./target/oci-devsecops-template-api-java
    #     severity: 'CRITICAL,HIGH'
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     timeout: 10m0s

    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: 'ghcr.io/artm-devsecops/devsecops-template-api-java:${{ github.sha }}'
    #     severity: 'CRITICAL,HIGH'
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #   env:
    #     XDG_RUNTIME_DIR: /run/user/1001

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: 'trivy-results.sarif'
